setwd("/Users/valade/Documents/GitHub/RShiny/RShinyGit")
getwd()
source("~/Documents/GitHub/RShinyGit/setup.R", echo=TRUE)
source("~/Documents/GitHub/RShinyGit/setup.R", echo=TRUE)
source("~/Documents/GitHub/RShinyGit/setup.R", echo=TRUE)
shiny::runApp()
source("~/Documents/GitHub/RShinyGit/setup.R", echo=TRUE)
data_expt_approach<-assignApproach(data_expt)
nminTechno<-2
nminEcos<-3
data_expt_approach<-data_expt
data_expt_approach$modelApproach<-"Hybrid approach"
data_expt_approach[
(data_expt_approach$manufacturing_emiss==1 | data_expt_approach$off_product_biogenic==1)&
(data_expt_approach$live_biomass_C==0 & data_expt_approach$harv_residues==0) &
(data_expt_approach$manufacturing_emiss+ data_expt_approach$maintenance_emiss +data_expt_approach$forestry_emiss+data_expt_approach$off_product_biogenic >=nminTechno)
,
"modelApproach"]<-"Technology approach"
data_expt_approach[
data_expt_approach$manufacturing_emiss==0 & data_expt_approach$off_product_biogenic==0&
(data_expt_approach$live_biomass_C==1 | data_expt_approach$harv_residues==1)&
( data_expt_approach$biogenic_dyn +data_expt_approach$live_biomass_C +data_expt_approach$harv_residues + data_expt_approach$soilC + data_expt_approach$eol_biogenic + data_expt_approach$products_storage_C >=nminEcos)
,
"modelApproach"]<-"Ecosystem approach"
nminTechno<-2
nminEcos<-3
data_expt_approach[
(data_expt_approach$manufacturing_emiss==1 | data_expt_approach$off_product_biogenic==1)&
(data_expt_approach$live_biomass_C==0 & data_expt_approach$harv_residues==0) &
(data_expt_approach$manufacturing_emiss+ data_expt_approach$maintenance_emiss +data_expt_approach$forestry_emiss+data_expt_approach$off_product_biogenic >=nminTechno)
,
"modelApproach"]<-"Technology approach"
data_expt_approach[
data_expt_approach$manufacturing_emiss==0 & data_expt_approach$off_product_biogenic==0&
(data_expt_approach$live_biomass_C==1 | data_expt_approach$harv_residues==1)&
( data_expt_approach$biogenic_dyn +data_expt_approach$live_biomass_C +data_expt_approach$harv_residues + data_expt_approach$soilC + data_expt_approach$eol_biogenic + data_expt_approach$products_storage_C >=nminEcos)
,
"modelApproach"]<-"Ecosystem approach"
data_expt_approach[
(data_expt_approach$manufacturing_emiss==1 | data_expt_approach$off_product_biogenic==1)&
(data_expt_approach$live_biomass_C==1 | data_expt_approach$harv_residues==1)&
( data_expt_approach$biogenic_dyn +data_expt_approach$live_biomass_C +data_expt_approach$harv_residues + data_expt_approach$soilC + data_expt_approach$eol_biogenic + data_expt_approach$products_storage_C >=nminEcos)&
(data_expt_approach$manufacturing_emiss+ data_expt_approach$maintenance_emiss +data_expt_approach$forestry_emiss+data_expt_approach$off_product_biogenic >=nminTechno)
,"modelApproach"]<-"Whole sector approach"
data_expt_approach$manufacturing_emiss
data_expt_approach$off_product_biogenic
data_expt_approach$harv_residues
data_expt_approach$live_biomass_C
data_expt_approach$biogenic_dyn +data_expt_approach$live_biomass_C +data_expt_approach$harv_residues + data_expt_approach$soilC + data_expt_approach$eol_biogenic + data_expt_approach$products_storage_C
(data_expt_approach$manufacturing_emiss+ data_expt_approach$maintenance_emiss +data_expt_approach$forestry_emiss+data_expt_approach$off_product_biogenic
)
nminTechno
data_expt_approach[
(data_expt_approach$manufacturing_emiss==1 | data_expt_approach$off_product_biogenic==1)&
(data_expt_approach$live_biomass_C==1 | data_expt_approach$harv_residues==1)&
( data_expt_approach$biogenic_dyn +data_expt_approach$live_biomass_C +data_expt_approach$harv_residues + data_expt_approach$soilC + data_expt_approach$eol_biogenic + data_expt_approach$products_storage_C >=nminEcos)&
(data_expt_approach$manufacturing_emiss+ data_expt_approach$maintenance_emiss +data_expt_approach$forestry_emiss+data_expt_approach$off_product_biogenic >=nminTechno)
,"modelApproach"]
data_expt_approach[
(data_expt_approach$manufacturing_emiss==1 | data_expt_approach$off_product_biogenic==1)&
(data_expt_approach$live_biomass_C==1 | data_expt_approach$harv_residues==1)&
( data_expt_approach$biogenic_dyn +data_expt_approach$live_biomass_C +data_expt_approach$harv_residues + data_expt_approach$soilC + data_expt_approach$eol_biogenic + data_expt_approach$products_storage_C >=nminEcos)&
(data_expt_approach$manufacturing_emiss+ data_expt_approach$maintenance_emiss +data_expt_approach$forestry_emiss+data_expt_approach$off_product_biogenic >=nminTechno)
,"modelApproach"]<-"Whole sector approach"
source("~/Documents/GitHub/RShinyGit/setup.R", echo=TRUE)
data_expt[132,]
source("~/Documents/GitHub/RShinyGit/setup.R", echo=TRUE)
runApp()
source("~/Documents/GitHub/RShinyGit/setup.R", echo=TRUE)
runApp()
source("~/Documents/GitHub/RShinyGit/setup.R", echo=TRUE)
runApp()
runApp()
runApp()
source("~/Documents/GitHub/RShinyGit/setup.R", echo=TRUE)
runApp()
tTestPairsSignifAggVarMelt
#xlistCriteria<-c("PaperID","singleProduct","time_horizon")
formulaRHS<-paste0(paste(listCriteria, collapse="+"),"+get(compartment)")
compartmentList<-c("soilC","harv_residues","live_biomass_C","products_storage_C","forestry_emiss","manufacturing_emiss","maintenance_emiss","eol_biogenic","off_product_biogenic","biogenic_dyn","fossil_dyn")
option<- ""
listCriteria<-"PaperID"
formulaRHS<-paste0(paste(listCriteria, collapse="+"),"+get(compartment)")
formulaShort<-""
for(i in seq(length(listCriteria))){
print("along listCriteria")
print(listCriteria[i])
formulaShort<-paste0(formulaShort,"get(listCriteria[",i,"])")
if(i!=length(listCriteria)){
formulaShort<-paste(formulaShort,"+")
}
if(i==length(listCriteria)){
formulaShort<-paste0(formulaShort,"~get(compartment)")
}
}
formulaShort<-as.formula(formulaShort)
formula=as.formula(paste0("get(variable)~ ",formulaRHS,option))
# WARNING : need to run it with only experiments done with whole system approach
# ----Run calculations
rm(list=c("tTestPairsSignifAggVar"))
rm(tTestPairsSignifAggVarMelt,tTestPairsSignifAggVar)
variable<-"substitution"
for(variable in c("substitution")){
# Select dat rows that have several model setups only changing one model parameter
t.u.d.m<-findDuplicates(data_expt,variable)
# Figures for each process -> To supplementary information
# for (compartment in compartmentList){
#   boxplotCompartment(t.u.d.m,compartment,variable,listCriteria)
# }
#
rm(list=c("tTestPairs"))
rm(tTestPairs)
for (compartment in compartmentList){
# For a given compartment model parameter, for each paper calculate mean value of substitution of each of the recorded values
t.u.d.mMean<-setNames(aggregate(formula,data=t.u.d.m, mean),c(listCriteria,compartment,"substitution.mn"))
# For a given compartment model parameter, for each paper calculate standard deviation value of substitution of each of the recorded values
t.u.d.mSd<-setNames(aggregate(formula,data=t.u.d.m, sd),c(listCriteria,compartment,"substitution.sd"))
t.u.d.mSd[is.na(t.u.d.mSd$substitution.sd),"substitution.sd"]<-0
# For a given compartment model parameter, for each paper calculate number of recorded values of substitution
t.u.d.mN<-setNames(aggregate(formula,data=t.u.d.m, length),c(listCriteria,compartment,"substitution.N"))
# For a given compartment model parameter, for each paper combine mean, std and number of recorded values of substitution
t.u.d.mMeanSdN<-merge(merge(t.u.d.mMean,t.u.d.mSd),t.u.d.mN)
# For a given compartment model parameter, Reshape to have only one line for each paper
data_expt_pairs<-data.table::dcast(setDT(t.u.d.mMeanSdN),
formulaShort,
value.var=c("substitution.mn","substitution.sd","substitution.N"))
#Filter out papers that do not have mean values for both model parameter values
data_expt_pairs<-data_expt_pairs[!is.na(data_expt_pairs$substitution.mn_0) & !is.na(data_expt_pairs$substitution.mn_1),]
#!!!!!Matrix of Boxplot of the slopes
#matrix is : rows Energy/Timber , columns model processes
#for each subplot bootstrap (compare all pairs of same-paper)
if( nrow(data_expt_pairs)>0){
if(exists("tTestPairs")){
print("trying to rbind")
print(paste("tTestPairs  :",dim(tTestPairs)))
print(paste("data_expt_pairs  :",dim(data_expt_pairs)))
print(paste("t.test2", t.test2(data_expt_pairs$substitution.mn_0, data_expt_pairs$substitution.mn_1, data_expt_pairs$substitution.sd_0, data_expt_pairs$substitution.sd_1, data_expt_pairs$substitution.N_0,data_expt_pairs$substitution.N_1,m0=0)))
tTestPairs<-rbind(tTestPairs,cbind(compartment,data_expt_pairs,t.test2(data_expt_pairs$substitution.mn_0, data_expt_pairs$substitution.mn_1, data_expt_pairs$substitution.sd_0, data_expt_pairs$substitution.sd_1, data_expt_pairs$substitution.N_0,data_expt_pairs$substitution.N_1,m0=0)))
print(paste("tTestPairs:",dim(tTestPairs)))
}else{
tTestPairs<- cbind(compartment,data_expt_pairs,t.test2(data_expt_pairs$substitution.mn_0, data_expt_pairs$substitution.mn_1, data_expt_pairs$substitution.sd_0, data_expt_pairs$substitution.sd_1, data_expt_pairs$substitution.N_0,data_expt_pairs$substitution.N_1,m0=0))
print(paste("tTestPairs:",dim(tTestPairs)))
}
}
}
tTestPairs$signif<-ifelse(tTestPairs$`p-value`<=0.05,"*","")
tTestPairs[is.na(tTestPairs$signif),c("signif")]<-"1"
tTestPairsSignif<-tTestPairs[(tTestPairs$signif=="*"),]
#tTestPairsSignif<-tTestPairsSignif[order(singleProduct),]
tTestPairsSignifAgg<-aggregate(tTestPairsSignif$`Difference of means`,
by=list(tTestPairsSignif$compartment),
function(x) mean(x))
colnames(tTestPairsSignifAgg)<-c("process",paste("Difference of means for ",variable))
tTestPairsSignifAgg<- tTestPairsSignifAgg[order(tTestPairsSignifAgg[,paste("Difference of means for ",variable)]),]
rownames(tTestPairsSignifAgg)<-NULL
#aggregate(data_modelShort[,],by=list(data_modelShort$singleProduct), function(x) length(which(x==1)))
if(!exists("tTestPairsSignifAggVar")){
tTestPairsSignifAggVar<-tTestPairsSignifAgg
print(paste("tTestPairsSignifAggVar:",dim(tTestPairsSignifAggVar)))
}else{
tTestPairsSignifAggVar<-merge(tTestPairsSignifAggVar,tTestPairsSignifAgg,by="process",all=TRUE)
print(paste("tTestPairsSignifAggVar:",dim(tTestPairsSignifAggVar)))
}
for(variable in c("substitution")){
# Select dat rows that have several model setups only changing one model parameter
t.u.d.m<-findDuplicates(data_expt,variable)
# Figures for each process -> To supplementary information
# for (compartment in compartmentList){
#   boxplotCompartment(t.u.d.m,compartment,variable,listCriteria)
# }
#
rm(list=c("tTestPairs"))
rm(tTestPairs)
for (compartment in compartmentList){
# For a given compartment model parameter, for each paper calculate mean value of substitution of each of the recorded values
t.u.d.mMean<-setNames(aggregate(formula,data=t.u.d.m, mean),c(listCriteria,compartment,"substitution.mn"))
# For a given compartment model parameter, for each paper calculate standard deviation value of substitution of each of the recorded values
t.u.d.mSd<-setNames(aggregate(formula,data=t.u.d.m, sd),c(listCriteria,compartment,"substitution.sd"))
t.u.d.mSd[is.na(t.u.d.mSd$substitution.sd),"substitution.sd"]<-0
# For a given compartment model parameter, for each paper calculate number of recorded values of substitution
t.u.d.mN<-setNames(aggregate(formula,data=t.u.d.m, length),c(listCriteria,compartment,"substitution.N"))
# For a given compartment model parameter, for each paper combine mean, std and number of recorded values of substitution
t.u.d.mMeanSdN<-merge(merge(t.u.d.mMean,t.u.d.mSd),t.u.d.mN)
# For a given compartment model parameter, Reshape to have only one line for each paper
data_expt_pairs<-data.table::dcast(setDT(t.u.d.mMeanSdN),
formulaShort,
value.var=c("substitution.mn","substitution.sd","substitution.N"))
#Filter out papers that do not have mean values for both model parameter values
data_expt_pairs<-data_expt_pairs[!is.na(data_expt_pairs$substitution.mn_0) & !is.na(data_expt_pairs$substitution.mn_1),]
#!!!!!Matrix of Boxplot of the slopes
#matrix is : rows Energy/Timber , columns model processes
#for each subplot bootstrap (compare all pairs of same-paper)
if( nrow(data_expt_pairs)>0){
if(exists("tTestPairs")){
print("trying to rbind")
print(paste("tTestPairs  :",dim(tTestPairs)))
print(paste("data_expt_pairs  :",dim(data_expt_pairs)))
print(paste("t.test2", t.test2(data_expt_pairs$substitution.mn_0, data_expt_pairs$substitution.mn_1, data_expt_pairs$substitution.sd_0, data_expt_pairs$substitution.sd_1, data_expt_pairs$substitution.N_0,data_expt_pairs$substitution.N_1,m0=0)))
tTestPairs<-rbind(tTestPairs,cbind(compartment,data_expt_pairs,t.test2(data_expt_pairs$substitution.mn_0, data_expt_pairs$substitution.mn_1, data_expt_pairs$substitution.sd_0, data_expt_pairs$substitution.sd_1, data_expt_pairs$substitution.N_0,data_expt_pairs$substitution.N_1,m0=0)))
print(paste("tTestPairs:",dim(tTestPairs)))
}else{
tTestPairs<- cbind(compartment,data_expt_pairs,t.test2(data_expt_pairs$substitution.mn_0, data_expt_pairs$substitution.mn_1, data_expt_pairs$substitution.sd_0, data_expt_pairs$substitution.sd_1, data_expt_pairs$substitution.N_0,data_expt_pairs$substitution.N_1,m0=0))
print(paste("tTestPairs:",dim(tTestPairs)))
}
}
}
tTestPairs$signif<-ifelse(tTestPairs$`p-value`<=0.05,"*","")
tTestPairs[is.na(tTestPairs$signif),c("signif")]<-"1"
tTestPairsSignif<-tTestPairs[(tTestPairs$signif=="*"),]
#tTestPairsSignif<-tTestPairsSignif[order(singleProduct),]
tTestPairsSignifAgg<-aggregate(tTestPairsSignif$`Difference of means`,
by=list(tTestPairsSignif$compartment),
function(x) mean(x))
colnames(tTestPairsSignifAgg)<-c("process",paste("Difference of means for ",variable))
tTestPairsSignifAgg<- tTestPairsSignifAgg[order(tTestPairsSignifAgg[,paste("Difference of means for ",variable)]),]
rownames(tTestPairsSignifAgg)<-NULL
#aggregate(data_modelShort[,],by=list(data_modelShort$singleProduct), function(x) length(which(x==1)))
if(!exists("tTestPairsSignifAggVar")){
tTestPairsSignifAggVar<-tTestPairsSignifAgg
print(paste("tTestPairsSignifAggVar:",dim(tTestPairsSignifAggVar)))
}else{
tTestPairsSignifAggVar<-merge(tTestPairsSignifAggVar,tTestPairsSignifAgg,by="process",all=TRUE)
print(paste("tTestPairsSignifAggVar:",dim(tTestPairsSignifAggVar)))
}
}
compartmentList<-c("soilC","harv_residues","live_biomass_C","products_storage_C","forestry_emiss","manufacturing_emiss","maintenance_emiss","eol_biogenic","off_product_biogenic","biogenic_dyn","fossil_dyn")
option<- ""
listCriteria<-"PaperID"
#xlistCriteria<-c("PaperID","singleProduct","time_horizon")
formulaRHS<-paste0(paste(listCriteria, collapse="+"),"+get(compartment)")
formulaShort<-""
for(i in seq(length(listCriteria))){
print("along listCriteria")
print(listCriteria[i])
formulaShort<-paste0(formulaShort,"get(listCriteria[",i,"])")
if(i!=length(listCriteria)){
formulaShort<-paste(formulaShort,"+")
}
if(i==length(listCriteria)){
formulaShort<-paste0(formulaShort,"~get(compartment)")
}
}
formulaShort<-as.formula(formulaShort)
formula=as.formula(paste0("get(variable)~ ",formulaRHS,option))
# WARNING : need to run it with only experiments done with whole system approach
# ----Run calculations
rm(list=c("tTestPairsSignifAggVar"))
rm(tTestPairsSignifAggVarMelt,tTestPairsSignifAggVar)
variable<-"substitution"
for(variable in c("substitution")){
# Select dat rows that have several model setups only changing one model parameter
t.u.d.m<-findDuplicates(data_expt,variable)
# Figures for each process -> To supplementary information
# for (compartment in compartmentList){
#   boxplotCompartment(t.u.d.m,compartment,variable,listCriteria)
# }
#
rm(list=c("tTestPairs"))
rm(tTestPairs)
for (compartment in compartmentList){
# For a given compartment model parameter, for each paper calculate mean value of substitution of each of the recorded values
t.u.d.mMean<-setNames(aggregate(formula,data=t.u.d.m, mean),c(listCriteria,compartment,"substitution.mn"))
# For a given compartment model parameter, for each paper calculate standard deviation value of substitution of each of the recorded values
t.u.d.mSd<-setNames(aggregate(formula,data=t.u.d.m, sd),c(listCriteria,compartment,"substitution.sd"))
t.u.d.mSd[is.na(t.u.d.mSd$substitution.sd),"substitution.sd"]<-0
# For a given compartment model parameter, for each paper calculate number of recorded values of substitution
t.u.d.mN<-setNames(aggregate(formula,data=t.u.d.m, length),c(listCriteria,compartment,"substitution.N"))
# For a given compartment model parameter, for each paper combine mean, std and number of recorded values of substitution
t.u.d.mMeanSdN<-merge(merge(t.u.d.mMean,t.u.d.mSd),t.u.d.mN)
# For a given compartment model parameter, Reshape to have only one line for each paper
data_expt_pairs<-data.table::dcast(setDT(t.u.d.mMeanSdN),
formulaShort,
value.var=c("substitution.mn","substitution.sd","substitution.N"))
#Filter out papers that do not have mean values for both model parameter values
data_expt_pairs<-data_expt_pairs[!is.na(data_expt_pairs$substitution.mn_0) & !is.na(data_expt_pairs$substitution.mn_1),]
#!!!!!Matrix of Boxplot of the slopes
#matrix is : rows Energy/Timber , columns model processes
#for each subplot bootstrap (compare all pairs of same-paper)
if( nrow(data_expt_pairs)>0){
if(exists("tTestPairs")){
print("trying to rbind")
print(paste("tTestPairs  :",dim(tTestPairs)))
print(paste("data_expt_pairs  :",dim(data_expt_pairs)))
print(paste("t.test2", t.test2(data_expt_pairs$substitution.mn_0, data_expt_pairs$substitution.mn_1, data_expt_pairs$substitution.sd_0, data_expt_pairs$substitution.sd_1, data_expt_pairs$substitution.N_0,data_expt_pairs$substitution.N_1,m0=0)))
tTestPairs<-rbind(tTestPairs,cbind(compartment,data_expt_pairs,t.test2(data_expt_pairs$substitution.mn_0, data_expt_pairs$substitution.mn_1, data_expt_pairs$substitution.sd_0, data_expt_pairs$substitution.sd_1, data_expt_pairs$substitution.N_0,data_expt_pairs$substitution.N_1,m0=0)))
print(paste("tTestPairs:",dim(tTestPairs)))
}else{
tTestPairs<- cbind(compartment,data_expt_pairs,t.test2(data_expt_pairs$substitution.mn_0, data_expt_pairs$substitution.mn_1, data_expt_pairs$substitution.sd_0, data_expt_pairs$substitution.sd_1, data_expt_pairs$substitution.N_0,data_expt_pairs$substitution.N_1,m0=0))
print(paste("tTestPairs:",dim(tTestPairs)))
}
}
}
tTestPairs$signif<-ifelse(tTestPairs$`p-value`<=0.05,"*","")
tTestPairs[is.na(tTestPairs$signif),c("signif")]<-"1"
tTestPairsSignif<-tTestPairs[(tTestPairs$signif=="*"),]
#tTestPairsSignif<-tTestPairsSignif[order(singleProduct),]
tTestPairsSignifAgg<-aggregate(tTestPairsSignif$`Difference of means`,
by=list(tTestPairsSignif$compartment),
function(x) mean(x))
colnames(tTestPairsSignifAgg)<-c("process",paste("Difference of means for ",variable))
tTestPairsSignifAgg<- tTestPairsSignifAgg[order(tTestPairsSignifAgg[,paste("Difference of means for ",variable)]),]
rownames(tTestPairsSignifAgg)<-NULL
#aggregate(data_modelShort[,],by=list(data_modelShort$singleProduct), function(x) length(which(x==1)))
if(!exists("tTestPairsSignifAggVar")){
tTestPairsSignifAggVar<-tTestPairsSignifAgg
print(paste("tTestPairsSignifAggVar:",dim(tTestPairsSignifAggVar)))
}else{
tTestPairsSignifAggVar<-merge(tTestPairsSignifAggVar,tTestPairsSignifAgg,by="process",all=TRUE)
print(paste("tTestPairsSignifAggVar:",dim(tTestPairsSignifAggVar)))
}
}
#### Heatmap
print("AggVar")
print(dim(tTestPairsSignifAggVar))
print(head(tTestPairsSignifAggVar))
print(class(tTestPairsSignifAggVar))
tTestPairsSignifAggVarMelt<-melt(as.data.frame(tTestPairsSignifAggVar),id="process")
print("AggVarMelt")
print(dim(tTestPairsSignifAggVarMelt))
colnames(tTestPairsSignifAggVarMelt)<-c("process","variable","value")
tTestPairsSignifAggVarMelt
tTestPairsSignifAggVar
tTestPairsSignifAgg
tTestPairsSignif
t.u.d.m
data_expt_pairs
tTestPairsSignifAggVarMelt
tTestPairsSignifAggVarMelt[tTestPairsSignifAggVarMelt$process=="live_biomass_C","process"]<-"Live biomass"
tTestPairsSignifAggVarMelt
source("~/Documents/GitHub/RShinyGit/setup.R", echo=TRUE)
runApp()
source("~/Documents/GitHub/RShinyGit/setup.R", echo=TRUE)
runApp()
source("~/Documents/GitHub/Wood-Carbon/setup.R", echo=TRUE)
runApp()
source("~/Documents/GitHub/Wood-Carbon/setup.R", echo=TRUE)
runApp()
source("~/Documents/GitHub/Wood-Carbon/setup.R", echo=TRUE)
runApp()
source("./functions.R")
## This script reads all raw data and creates R workspace that will be called by the application
rawDataPath<-"./rawData/"
initDataPath<-"./initData/"
#database.file <-paste0(rawDataPath,"/database_substitution_metaanalysis.v5.v6.QC7.init.xlsx")
database.file <-paste0(rawDataPath,"/database_substitution_metaanalysis.v5.v6.QC7.ALL.xlsx")
#database.file <-"/Users/valade/EcoSols_Nextcloud2/Substitution/Metaanalysis/Data_extraction/v6_extraction/database_substitution_metaanalysis.v5.v6.ALL.xlsx"
#For FAO and Bais data on country production of wood
dataPath<-"/Users/valade/EcoSols_Nextcloud2/Substitution/Substitution_AV/CCycleSynthesis/biblioData/"
#For global flux size
dataFlux.file<-"/Users/valade/EcoSols_Nextcloud2/Substitution/Substitution_AV/manuscript/2024_metaanalysis/TableForestCCycleSynthesis.2.xlsx"
# Set graphic parameters
txt_size<-10
txt_size_small<-9
txt_size_big<-12
txt_size_verybig<-24
txt_angle<-45
color_fossil<- as.character("#2E8FC5")
color_biogenic<-as.character("#208039")
palette_C<-c(color_fossil,"grey",color_biogenic)
color_insitu<-as.character("#D59138")
color_exsitu<-as.character("#D4BA12")
palette_situ<-c(color_insitu,"grey",color_exsitu)
color_CBoth <- colorRampPalette(c(color_fossil,color_biogenic))(3)[2]
color_situBoth <- colorRampPalette(c(color_insitu,color_exsitu))(3)[2]
# ==========================Process data
palette<-read_excel(database.file,sheet=3,col_names=TRUE)
wood_type_names<-c(
`UpstreamInput` = "Upstream",
`mixedProduct` = "Mixed products",
`TimberInput` = "Timber",
`PulpPaperInput` = "Pulp and paper",
`EnergyInput` = "Energy",
`All`='All types of wood use'
)
# -------------
# ------------- Read header of data and palette to have a lookup table for category of variables along with their colors
categories<-t(read_excel(database.file,n_max=7,col_names=FALSE))
categoriesdf<-as.data.frame((categories),row.names=NULL )
colnames(categoriesdf)<-c("cat0","cat1","colcat1","cat2","colcat2","cat3","names")
categoriesdf$id<-1:nrow(categoriesdf)
# -------------
# ------------- Read corpus of data -> output = data
data<-read_excel(database.file,skip=6)
## Make scale index lowercase
#data$scale<-tolower(data$scale)
## Make country index Titlecase and prepare country list
data$country<-str_to_title(data$country)
countryCodes<-read.csv(paste0(dataPath,"countryCodes/countryCodes.csv"))
countryCodes<-countryCodes[,c("Country","Alpha.2.code","Alpha.3.code")]
colnames(countryCodes)<-c("Country","Alpha-2 code","Alpha-3 code")
countryCodes$Country<-str_to_title(countryCodes$Country)
data_bibliom<-bibliom(data)
data_study<-study(data)
data_expt<-expt(data)
data_expt_approach<-assignApproach(data_expt)
study_freq<-funcFreq(data_study,categoriesdf)
expt_freq<-funcFreq(data_expt,categoriesdf)
countryData<-country(data_study)
singleProductVect<-c('UpstreamInput','TimberInput','PulpPaperInput','EnergyInput','mixedProduct')
map.db<-NULL
map.world<-NULL
map.world <- map_data('world')
map.world<-map.world[map.world$lat>-58,]
nInit<-dim(map.world)[1]
map.world<-map.world %>% slice(rep(1:n(), each = 5))
map.world$singleProduct<-rep(singleProductVect,len=nInit)
map.world$region<-str_to_title(map.world$region)
## ------------------------------------------------------------------------------------------------------------------------------------------------
# Les noms de pays vont servir à paramétrer les cases à cocher dans ui
# countries_study <- sort(unique(data$country))
#countries <- data_study$country
countries <- sort(unique(data_study$country))
#countries <- ifelse(countries == "Eur", "Europe", countries)
countriesEurope <- c("Austria", "Denmark","Finland", "France", "Germany", "Ireland", "Lithuania", "Norway", "Portugal", "Sweden", "Switzerland", "Uk", "Ukraine")
timeHorizon <- sort(unique(data$time_horizon))
#to make "+100" the last element
timeHorizonFrstElmt <- timeHorizon[1]
timeHorizon <- timeHorizon[-1]
timeHorizon <- c(timeHorizon, timeHorizonFrstElmt)
# countries_world <- unique(map.world$region)
scaleAgg <- unique(data$scaleAgg)
products <- sort(unique(data$singleProduct))
productsLabels<-gsub("([a-z])([A-Z])","\\1 \\2",str_remove(products,'Input'))
##Test
#boundaries <-sort(unique(data$boundaries))
processes <- sort(unique(colnames(data_expt)[colnames(data_expt) %in% categoriesdf[categoriesdf$cat2 %in% c( "C fluxes"),'names']]))
##End test
#dynamics <-sort(unique(data$dynamics))
dynamics <- sort(unique(colnames(data_expt)[colnames(data_expt) %in% categoriesdf[categoriesdf$cat2 %in% c( "Dynamics"),'names']]))
dynamicsLabels<-gsub("Dyn"," Dynamics",dynamics)
driver1 <-sort(unique(data$driver1))
source("~/Documents/GitHub/Wood-Carbon/setup.R", echo=TRUE)
runApp()
source("~/Documents/GitHub/Wood-Carbon/setup.R", echo=TRUE)
source("~/Documents/GitHub/Wood-Carbon/setup.R", echo=TRUE)
runApp()
source("~/Documents/GitHub/Wood-Carbon/functions.R", echo=TRUE)
source("~/Documents/GitHub/Wood-Carbon/setup.R", echo=TRUE)
runApp()
runApp()
runApp()
source("~/Documents/GitHub/Wood-Carbon/setup.R", echo=TRUE)
shiny::runApp()
source("~/Documents/GitHub/Wood-Carbon/setup.R", echo=TRUE)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/Documents/GitHub/mathjaxShiny')
runApp('~/Documents/GitHub/mathjaxShiny')
runApp('~/Documents/GitHub/mathjaxShiny')
shiny::runApp()
runApp()
runApp()
source("~/Documents/GitHub/Wood-Carbon/setup.R", echo=TRUE)
runApp()
runApp('~/Documents/GitHub/RShiny/RShiny')
shiny::runApp()
sort(unique(data_study$country))
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
