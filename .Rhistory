theme_bw()+
theme( axis.ticks = element_blank(),text = element_text(size=txt_size_big),axis.text.x = element_text(angle = 90,hjust=0.5,vjust=0.))+
ylab("Number of studies")+
xlab("Forest sector description")+
#geom_text(aes(label = value, text = paste(longName, value)), alpha = 0, hoverinfo = "text", show.legend = FALSE)+
geom_text(aes(label = value, text = paste(names, value)), alpha = 0, hoverinfo = "text", show.legend = FALSE)+
facet_wrap(~wrap)
#
# return(gg)
#ggsave("study_model_freq.pdf",width=7,height=5)
}
study_freq<-funcFreq(data_study,categoriesdf)
create_processes_frequency(study_freq[(study_freq$cat1 =="Processes") & !is.na(study_freq$cat1),] )
funcFreq<-function(df,categoriesdf){
dfShort<-subset(df,select=-c(Exclusion,DOI))
nMixedProduct<-dim(dfShort[dfShort$singleProduct=="mixedProduct","singleProduct"])[1]
nEnergyInput<-dim(dfShort[dfShort$singleProduct=="EnergyInput","singleProduct"])[1]
nTimberInput<-dim(dfShort[dfShort$singleProduct=="TimberInput","singleProduct"])[1]
nUpstreamInput<-dim(dfShort[dfShort$singleProduct=="UpstreamInput","singleProduct"])[1]
nPulpPaperInput<-dim(dfShort[dfShort$singleProduct=="PulpPaperInput","singleProduct"])[1]
Freq0<-aggregate(dfShort[,],by=list(dfShort$singleProduct), function(x) length(which(x==1)))
Freq1<-data.frame(t(Freq0[,2:ncol(Freq0)]))
colnames(Freq1)<-Freq0$Group.1
Freq1[,"names"]<-colnames(dfShort)
Freq<-melt(Freq1)
Freq<-data.frame(merge(Freq,categoriesdf[,c('names','colcat2','cat2','cat1','colcat1')],by="names",all.x=T))
Freq<-unique(Freq)
Freq<-Freq[!is.na(Freq$cat2),]
Freq$names<-factor(Freq$names,levels=unique(categoriesdf[order(categoriesdf$id),'names']))
Freq$valuePercent<-NA
Freq[Freq$variable=="UpstreamInput",'valuePercent']<-Freq[Freq$variable=="UpstreamInput",'value']/nUpstreamInput*100
Freq[Freq$variable=="PulpPaperInput",'valuePercent']<-Freq[Freq$variable=="PulpPaperInput",'value']/nPulpPaperInput*100
Freq[Freq$variable=="TimberInput",'valuePercent']<-Freq[Freq$variable=="TimberInput",'value']/nTimberInput*100
Freq[Freq$variable=="EnergyInput",'valuePercent']<-Freq[Freq$variable=="EnergyInput",'value']/nEnergyInput*100
Freq[Freq$variable=="mixedProduct",'valuePercent']<-Freq[Freq$variable=="mixedProduct",'value']/nMixedProduct*100
Freq[Freq$variable=="UpstreamInput",'nSingleProduct']<-nUpstreamInput
Freq[Freq$variable=="PulpPaperInput",'nSingleProduct']<-nPulpPaperInput
Freq[Freq$variable=="TimberInput",'nSingleProduct']<-nTimberInput
Freq[Freq$variable=="EnergyInput",'nSingleProduct']<-nEnergyInput
Freq[Freq$variable=="mixedProduct",'nSingleProduct']<-nMixedProduct
Freq$longNames<-NA
Freq[Freq$names=="live_biomass_C","longName"]<-"Live biomass"
Freq[Freq$names=="soilC","longName"]<-"Soil carbon"
Freq[Freq$names=="harv_residues","longName"]<-"Harvest residues"
Freq[Freq$names=="eol_biogenic","longName"]<-"End-of-life biogenic emiss."
Freq[Freq$names=="eol_fossil","longName"]<-"End-of-life fossil emiss."
Freq[Freq$names=="maintenance_emiss","longName"]<-"Maintenance emiss."
Freq[Freq$names=="manufacturing_emiss","longName"]<-"Manufacturing emiss."
Freq[Freq$names=="products_storage_C","longName"]<-"C storage in products"
Freq[Freq$names=="off_product_biogenic","longName"]<-"Avoided emiss."
Freq[Freq$names=="forestry_emiss","longName"]<-"Forestry emiss."
Freq[Freq$names=="LUC_dyn","longName"]<-"Dyn. of LUC"
Freq[Freq$names=="rebound_dyn","longName"]<-"Dyn. of econ. feedbacks"
Freq[Freq$names=="biogenic_dyn","longName"]<-"Dyn. of biogenic emiss."
Freq[Freq$names=="fossil_dyn","longName"]<-"Dyn. of fossil emiss."
Freq[Freq$names=="displacement factor used","longName"]<-"Generic displacement factor"
Freq[Freq$names=="self-calculated DF","longName"]<-"Self-calculated displacement factor"
return(Freq)
}
create_processes_frequency <- function(study_freq, wrap){
if(missing(wrap)){
plotData<-study_freq[(study_freq$cat1 =="Processes") & !is.na(study_freq$cat1),c("longName","variable","value","cat2","colcat2")]
#   plotData<-study_freq[(study_freq$cat1 =="Processes") & !is.na(study_freq$cat1),c("names","variable","value","cat2","colcat2")]
plotData<-aggregate(plotData$value ,by=list(plotData$longName,plotData$cat2,plotData$colcat2),FUN=sum)
#    plotData<-aggregate(plotData$value ,by=list(plotData$names,plotData$cat2,plotData$colcat2),FUN=sum)
colnames(plotData)<-c("longName","cat2","colcat2","value")
#    colnames(plotData)<-c("names","cat2","colcat2","value")
colorVect<-unique(plotData[,c("colcat2","cat2")])
colordictProcesses<-setNames(as.character(colorVect$colcat2),
as.character(colorVect$cat2))
plotData$wrap<-"All"
}else{
plotData<-study_freq[(study_freq$cat1 =="Processes") & !is.na(study_freq$cat1),c("longName","variable","value","cat2","colcat2")]
#    plotData<-study_freq[(study_freq$cat1 =="Processes") & !is.na(study_freq$cat1),c("names","variable","value","cat2","colcat2")]
colorVect<-unique(plotData[,c("colcat2","cat2")])
colordictProcesses<-setNames(as.character(colorVect$colcat2),
as.character(colorVect$cat2))
plotData$wrap<-plotData$variable
#Debug info
print("found(wrap)")
print(head(plotData))
##
}
plotData$wrap<-factor(plotData$wrap,levels=sort(levels(factor(plotData$wrap))))
ggplot(plotData,aes(x=longName,y=value,fill=cat2))+
#    ggplot(plotData,aes(x=names,y=value,fill=cat2))+
coord_flip() +
geom_bar(stat="identity") +
#  scale_fill_manual(values=colorsLabels$colcat2,labels=waiver())+
scale_fill_manual(values=colordictProcesses)+
theme_bw()+
theme( axis.ticks = element_blank(),text = element_text(size=txt_size_big),axis.text.x = element_text(angle = 90,hjust=0.5,vjust=0.))+
ylab("Number of studies")+
xlab("Forest sector description")+
#geom_text(aes(label = value, text = paste(longName, value)), alpha = 0, hoverinfo = "text", show.legend = FALSE)+
geom_text(aes(label = value, text = paste(names, value)), alpha = 0, hoverinfo = "text", show.legend = FALSE)+
facet_wrap(~wrap)
#
# return(gg)
#ggsave("study_model_freq.pdf",width=7,height=5)
}
funcFreq<-function(df,categoriesdf){
dfShort<-subset(df,select=-c(Exclusion,DOI))
nMixedProduct<-dim(dfShort[dfShort$singleProduct=="mixedProduct","singleProduct"])[1]
nEnergyInput<-dim(dfShort[dfShort$singleProduct=="EnergyInput","singleProduct"])[1]
nTimberInput<-dim(dfShort[dfShort$singleProduct=="TimberInput","singleProduct"])[1]
nUpstreamInput<-dim(dfShort[dfShort$singleProduct=="UpstreamInput","singleProduct"])[1]
nPulpPaperInput<-dim(dfShort[dfShort$singleProduct=="PulpPaperInput","singleProduct"])[1]
Freq0<-aggregate(dfShort[,],by=list(dfShort$singleProduct), function(x) length(which(x==1)))
Freq1<-data.frame(t(Freq0[,2:ncol(Freq0)]))
colnames(Freq1)<-Freq0$Group.1
Freq1[,"names"]<-colnames(dfShort)
Freq<-melt(Freq1)
Freq<-data.frame(merge(Freq,categoriesdf[,c('names','colcat2','cat2','cat1','colcat1')],by="names",all.x=T))
Freq<-unique(Freq)
Freq<-Freq[!is.na(Freq$cat2),]
Freq$names<-factor(Freq$names,levels=unique(categoriesdf[order(categoriesdf$id),'names']))
Freq$valuePercent<-NA
Freq[Freq$variable=="UpstreamInput",'valuePercent']<-Freq[Freq$variable=="UpstreamInput",'value']/nUpstreamInput*100
Freq[Freq$variable=="PulpPaperInput",'valuePercent']<-Freq[Freq$variable=="PulpPaperInput",'value']/nPulpPaperInput*100
Freq[Freq$variable=="TimberInput",'valuePercent']<-Freq[Freq$variable=="TimberInput",'value']/nTimberInput*100
Freq[Freq$variable=="EnergyInput",'valuePercent']<-Freq[Freq$variable=="EnergyInput",'value']/nEnergyInput*100
Freq[Freq$variable=="mixedProduct",'valuePercent']<-Freq[Freq$variable=="mixedProduct",'value']/nMixedProduct*100
Freq[Freq$variable=="UpstreamInput",'nSingleProduct']<-nUpstreamInput
Freq[Freq$variable=="PulpPaperInput",'nSingleProduct']<-nPulpPaperInput
Freq[Freq$variable=="TimberInput",'nSingleProduct']<-nTimberInput
Freq[Freq$variable=="EnergyInput",'nSingleProduct']<-nEnergyInput
Freq[Freq$variable=="mixedProduct",'nSingleProduct']<-nMixedProduct
Freq$longNames<-NA
Freq[Freq$names=="live_biomass_C","longName"]<-"Live biomass"
Freq[Freq$names=="soilC","longName"]<-"Soil carbon"
Freq[Freq$names=="harv_residues","longName"]<-"Harvest residues"
Freq[Freq$names=="eol_biogenic","longName"]<-"End-of-life biogenic emiss."
Freq[Freq$names=="eol_fossil","longName"]<-"End-of-life fossil emiss."
Freq[Freq$names=="maintenance_emiss","longName"]<-"Maintenance emiss."
Freq[Freq$names=="manufacturing_emiss","longName"]<-"Manufacturing emiss."
Freq[Freq$names=="products_storage_C","longName"]<-"C storage in products"
Freq[Freq$names=="off_product_biogenic","longName"]<-"Avoided emiss."
Freq[Freq$names=="forestry_emiss","longName"]<-"Forestry emiss."
Freq[Freq$names=="LUC_dyn","longName"]<-"Dyn. of LUC"
Freq[Freq$names=="rebound_dyn","longName"]<-"Dyn. of econ. feedbacks"
Freq[Freq$names=="biogenic_dyn","longName"]<-"Dyn. of biogenic emiss."
Freq[Freq$names=="fossil_dyn","longName"]<-"Dyn. of fossil emiss."
Freq[Freq$names=="displacement factor used","longName"]<-"Generic displacement factor"
Freq[Freq$names=="self-calculated DF","longName"]<-"Self-calculated displacement factor"
return(Freq)
}
study_freq<-funcFreq(data_study,categoriesdf)
create_processes_frequency(study_freq[(study_freq$cat1 =="Processes") & !is.na(study_freq$cat1),] )
create_processes_frequency <- function(study_freq, wrap){
if(missing(wrap)){
plotData<-study_freq[(study_freq$cat1 =="Processes") & !is.na(study_freq$cat1),c("longName","variable","value","cat2","colcat2")]
#   plotData<-study_freq[(study_freq$cat1 =="Processes") & !is.na(study_freq$cat1),c("names","variable","value","cat2","colcat2")]
plotData<-aggregate(plotData$value ,by=list(plotData$longName,plotData$cat2,plotData$colcat2),FUN=sum)
#    plotData<-aggregate(plotData$value ,by=list(plotData$names,plotData$cat2,plotData$colcat2),FUN=sum)
colnames(plotData)<-c("longName","cat2","colcat2","value")
#    colnames(plotData)<-c("names","cat2","colcat2","value")
colorVect<-unique(plotData[,c("colcat2","cat2")])
colordictProcesses<-setNames(as.character(colorVect$colcat2),
as.character(colorVect$cat2))
plotData$wrap<-"All"
}else{
plotData<-study_freq[(study_freq$cat1 =="Processes") & !is.na(study_freq$cat1),c("longName","variable","value","cat2","colcat2")]
#    plotData<-study_freq[(study_freq$cat1 =="Processes") & !is.na(study_freq$cat1),c("names","variable","value","cat2","colcat2")]
colorVect<-unique(plotData[,c("colcat2","cat2")])
colordictProcesses<-setNames(as.character(colorVect$colcat2),
as.character(colorVect$cat2))
plotData$wrap<-plotData$variable
#Debug info
print("found(wrap)")
print(head(plotData))
##
}
plotData$wrap<-factor(plotData$wrap,levels=sort(levels(factor(plotData$wrap))))
ggplot(plotData,aes(x=longName,y=value,fill=cat2))+
#    ggplot(plotData,aes(x=names,y=value,fill=cat2))+
coord_flip() +
geom_bar(stat="identity") +
#  scale_fill_manual(values=colorsLabels$colcat2,labels=waiver())+
scale_fill_manual(values=colordictProcesses)+
theme_bw()+
theme( axis.ticks = element_blank(),text = element_text(size=txt_size_big),axis.text.x = element_text(angle = 90,hjust=0.5,vjust=0.))+
ylab("Number of studies")+
xlab("Forest sector description")+
geom_text(aes(label = value, text = paste(longName, value)), alpha = 0, hoverinfo = "text", show.legend = FALSE)+
#geom_text(aes(label = value, text = paste(names, value)), alpha = 0, hoverinfo = "text", show.legend = FALSE)+
facet_wrap(~wrap)
#
# return(gg)
#ggsave("study_model_freq.pdf",width=7,height=5)
}
runApp()
create_processes_frequency(study_freq[(study_freq$cat1 =="Processes") & !is.na(study_freq$cat1),] )
study_freq<-funcFreq(data_study,categoriesdf)
create_processes_frequency(study_freq[(study_freq$cat1 =="Processes") & !is.na(study_freq$cat1),] )
source("~/Documents/GitHub/Wood-Carbon/setup.R", echo=TRUE)
source("~/Documents/GitHub/Wood-Carbon/setup.R", echo=TRUE)
runApp()
R
info()
Rinfo()
runApp()
source("./functions.R")
## This script reads all raw data and creates R workspace that will be called by the application
rawDataPath<-"./rawData/"
initDataPath<-"./initData/"
wwwDataPath<-"./www/"
#database.file <-paste0(rawDataPath,"/database_substitution_metaanalysis.v5.v6.QC7.init.xlsx")
database.file <-paste0(rawDataPath,"/database_substitution_metaanalysis.v5.v6.QC7.ALL.xlsx")
#database.file <-"/Users/valade/EcoSols_Nextcloud2/Substitution/Metaanalysis/Data_extraction/v6_extraction/database_substitution_metaanalysis.v5.v6.ALL.xlsx"
#For FAO and Bais data on country production of wood
dataPath<-"/Users/valade/EcoSols_Nextcloud2/Substitution/Substitution_AV/CCycleSynthesis/biblioData/"
#For global flux size
dataFlux.file<-paste0(rawDataPath,"TableForestCCycleSynthesis.3.xlsx")
# Look at  world values in Peng-> extract	https://unece.org/sites/default/files/2022-05/unece-fao-sp-51-main-report-forest-sector-outlook_0.pdf
# Set graphic parameters
txt_size<-10
txt_size_small<-9
txt_size_big<-12
txt_size_verybig<-24
txt_angle<-45
color_fossil<- as.character("#332288ff")
color_biogenic<-as.character("#cc6677ff")
color_sum<-"black"
palette_C<-c(color_fossil,"grey",color_biogenic)
color_insitu<-as.character("#117733ff")
color_exsitu<-as.character("#ddcc77ff")
palette_situ<-c(color_insitu,"grey",color_exsitu)
# ==========================Process data
palette<-read_excel(database.file,sheet=3,col_names=TRUE)
wood_type_names<-c(
`UpstreamInput` = "Upstream",
`mixedProduct` = "Mixed products",
`TimberInput` = "Timber",
`PulpPaperInput` = "Pulp and paper",
`EnergyInput` = "Energy",
`All`='All types of wood use'
)
# -------------
# ------------- Gobal carbon cycle synthesis
refCProces<-GlobalFluxData(dataFlux.file)
CcylePlot<-create_C_synthesis_plot(refCProces)
ggsave(paste0(wwwDataPath,"Csynthesis.png"),width=10,bg='transparent')
# -------------
# ------------- Read header of data and palette to have a lookup table for category of variables along with their colors
categories<-t(read_excel(database.file,n_max=7,col_names=FALSE))
categoriesdf<-as.data.frame((categories),row.names=NULL )
colnames(categoriesdf)<-c("cat0","cat1","colcat1","cat2","colcat2","cat3","names")
categoriesdf$id<-1:nrow(categoriesdf)
# -------------
# ------------- Read corpus of data -> output = data
data<-read_excel(database.file,skip=6)
## Make scale index lowercase
#data$scale<-tolower(data$scale)
## Make country index Titlecase and prepare country list
data$country<-str_to_title(data$country)
countryCodes<-read.csv(paste0(dataPath,"countryCodes/countryCodes.csv"))
countryCodes<-countryCodes[,c("Country","Alpha.2.code","Alpha.3.code")]
colnames(countryCodes)<-c("Country","Alpha-2 code","Alpha-3 code")
countryCodes$Country<-str_to_title(countryCodes$Country)
data_bibliom<-bibliom(data)
data_study<-study(data)
data_expt<-expt(data)
data_expt_approach<-assignApproach(data_expt)
study_freq<-funcFreq(data_study,categoriesdf)
expt_freq<-funcFreq(data_expt,categoriesdf)
countryData<-country(data_study)
singleProductVect<-c('UpstreamInput','TimberInput','PulpPaperInput','EnergyInput','mixedProduct')
map.db<-NULL
map.world<-NULL
map.world <- map_data('world')
map.world<-map.world[map.world$lat>-58,]
nInit<-dim(map.world)[1]
map.world<-map.world %>% slice(rep(1:n(), each = 5))
map.world$singleProduct<-rep(singleProductVect,len=nInit)
map.world$region<-str_to_title(map.world$region)
## ------------------------------------------------------------------------------------------------------------------------------------------------
# Les noms de pays vont servir à paramétrer les cases à cocher dans ui
# countries_study <- sort(unique(data$country))
#countries <- data_study$country
countries <- sort(unique(data_study$country))
#countries <- ifelse(countries == "Eur", "Europe", countries)
countriesEurope <- c("Austria", "Denmark","Finland", "France", "Germany", "Ireland", "Lithuania", "Norway", "Portugal", "Sweden", "Switzerland", "Uk", "Ukraine")
timeHorizon <- sort(unique(data$time_horizon))
#to make "+100" the last element
timeHorizonFrstElmt <- timeHorizon[1]
timeHorizon <- timeHorizon[-1]
timeHorizon <- c(timeHorizon, timeHorizonFrstElmt)
# countries_world <- unique(map.world$region)
scaleAgg <- unique(data$scaleAgg)
products <- sort(unique(data$singleProduct))
productsLabels<-gsub("([a-z])([A-Z])","\\1 \\2",str_remove(products,'Input'))
##Test
#boundaries <-sort(unique(data$boundaries))
processes <- sort(unique(colnames(data_expt)[colnames(data_expt) %in% categoriesdf[categoriesdf$cat2 %in% c( "C fluxes"),'names']]))
##End test
#dynamics <-sort(unique(data$dynamics))
dynamics <- sort(unique(colnames(data_expt)[colnames(data_expt) %in% categoriesdf[categoriesdf$cat2 %in% c( "Dynamics"),'names']]))
dynamicsLabels<-gsub("Dyn"," Dynamics",dynamics)
driver1 <-sort(unique(data$driver1))
driver1Cat <-sort(unique(data$driver1Cat))
valSub <- round(sort(unique(data$substitution)), digits = 1)
minValSub <- min(valSub, na.rm = TRUE)
maxValSub <- max(valSub, na.rm = TRUE)
data_expt_approachResults<-assignApproach(data_expt)
plotData.approachC<-plotDataFunc(data_expt_approachResults, c("Whole sector approach","Technology approach","Ecosystem approach"),NULL,"modelApproach")
forestPlotData.approachC<-forestPlotDataFunc(plotData.approachC,"modelApproach",FALSE)
write.csv(plotData.approachC,paste0(initDataPath,"plotData.approachC.csv"))
write.csv(forestPlotData.approachC,paste0(initDataPath,"forestPlotData.approachC.csv"))
plotData.driverC<-plotDataFunc(data_expt_approachResults, c("Whole sector approach"),NULL,"driver1")
forestPlotData.driverC<-forestPlotDataFunc(plotData.driverC,"driver1",TRUE) #set includeSplit2 to TRUE
write.csv(plotData.driverC,paste0(initDataPath,"plotData.driverC.csv"))
write.csv(forestPlotData.driverC,paste0(initDataPath,"forestPlotData.driverC.csv"))
plotData.driverC<-plotDataFunc(data_expt_approachResults, c("Whole sector approach"),NULL,"driver1Cat")
forestPlotData.driverC<-forestPlotDataFunc(plotData.driverC,"driver1Cat",FALSE) #set includeSplit2 to TRUE
write.csv(plotData.driverC,paste0(initDataPath,"plotData.driverCatC.csv"))
write.csv(forestPlotData.driverC,paste0(initDataPath,"forestPlotData.driverCatC.csv"))
expt_freq<-funcFreq(data_expt_select(),categoriesdf)
expt_freq<-funcFreq(data_expt,categoriesdf)
create_driver_frequency(expt_freq[(expt_freq$cat1 =="Change in practices"|expt_freq$cat1 =="Environmental change") & !is.na(expt_freq$cat1),] )
expt_freq
create_driver_frequency <- function(expt_freq,wrap){
if(missing(wrap)){
plotData<-expt_freq[(expt_freq$cat1 =="Change in practices"|expt_freq$cat1 =="Environmental change") & !is.na(expt_freq$cat1),
c("longName","variable","value","cat2","colcat2")]
plotData<-aggregate(plotData$value ,by=list(plotData$longName,plotData$cat2,plotData$colcat2),FUN=sum)
colnames(plotData)<-c("names","cat2","colcat2","value")
colorVectDrivers<-unique(plotData[,c("colcat2","cat2")])
colordictDrivers<-setNames(as.character(colorVectDrivers$colcat2),
as.character(colorVectDrivers$cat2))
plotData$wrap<-"All"
}else{
plotData<-expt_freq[(expt_freq$cat1 =="Change in practices"|expt_freq$cat1 =="Environmental change") & !is.na(expt_freq$cat1),
c("longName","variable","value","cat2","colcat2")]
colorVectDrivers<-unique(plotData[,c("colcat2","cat2")])
colordictDrivers<-setNames(as.character(colorVectDrivers$colcat2),
as.character(colorVectDrivers$cat2))
plotData$wrap<-plotData$variable
#Debug info
print("found(wrap)")
print(head(plotData))
##
}
plotData$wrap<-factor(plotData$wrap,levels=sort(levels(factor(plotData$wrap))))
ggplot(plotData,aes(x=longName,y=value,fill=cat2))+
coord_flip() +
geom_bar(stat="identity") +
scale_fill_manual(values=colordictDrivers)+
theme_bw()+
theme( axis.ticks = element_blank(),text = element_text(size=txt_size_big),axis.text.x = element_text(angle = 90,hjust=0.5,vjust=0.))+
ylab("Number of experiments")+
xlab("Forest sector description") +
facet_wrap(~wrap)
#ggsave("expt_model_freq.pdf",width=7,height=5)
}
plotData<-expt_freq[(expt_freq$cat1 =="Change in practices"|expt_freq$cat1 =="Environmental change") & !is.na(expt_freq$cat1),
c("longName","variable","value","cat2","colcat2")]
plotData<-expt_freq[(expt_freq$cat1 =="Change in practices"|expt_freq$cat1 =="Environmental change") & !is.na(expt_freq$cat1),
c("longName","variable","value","cat2","colcat2")]
plotData
expt_freq
df<-data_expt
dfShort<-subset(df,select=-c(Exclusion,DOI))
dfShort
nMixedProduct<-dim(dfShort[dfShort$singleProduct=="mixedProduct","singleProduct"])[1]
nEnergyInput<-dim(dfShort[dfShort$singleProduct=="EnergyInput","singleProduct"])[1]
nTimberInput<-dim(dfShort[dfShort$singleProduct=="TimberInput","singleProduct"])[1]
nUpstreamInput<-dim(dfShort[dfShort$singleProduct=="UpstreamInput","singleProduct"])[1]
nPulpPaperInput<-dim(dfShort[dfShort$singleProduct=="PulpPaperInput","singleProduct"])[1]
Freq0<-aggregate(dfShort[,],by=list(dfShort$singleProduct), function(x) length(which(x==1)))
Freq0
Freq1<-data.frame(t(Freq0[,2:ncol(Freq0)]))
Freq1
colnames(Freq1)<-Freq0$Group.1
Freq1[,"names"]<-colnames(dfShort)
Freq1
Freq<-melt(Freq1)
Freq<-melt(Freq1)
Freq
Freq<-data.frame(merge(Freq,categoriesdf[,c('names','colcat2','cat2','cat1','colcat1')],by="names",all.x=T))
Freq
Freq<-unique(Freq)
Freq<-Freq[!is.na(Freq$cat2),]
Freq
unique(categoriesdf[order(categoriesdf$id),'names'])
Freq$names<-factor(Freq$names,levels=unique(categoriesdf[order(categoriesdf$id),'names']))
Freq$valuePercent<-NA
Freq[Freq$variable=="UpstreamInput",'valuePercent']<-Freq[Freq$variable=="UpstreamInput",'value']/nUpstreamInput*100
Freq[Freq$variable=="PulpPaperInput",'valuePercent']<-Freq[Freq$variable=="PulpPaperInput",'value']/nPulpPaperInput*100
Freq[Freq$variable=="TimberInput",'valuePercent']<-Freq[Freq$variable=="TimberInput",'value']/nTimberInput*100
Freq[Freq$variable=="EnergyInput",'valuePercent']<-Freq[Freq$variable=="EnergyInput",'value']/nEnergyInput*100
Freq[Freq$variable=="mixedProduct",'valuePercent']<-Freq[Freq$variable=="mixedProduct",'value']/nMixedProduct*100
Freq[Freq$variable=="UpstreamInput",'nSingleProduct']<-nUpstreamInput
Freq[Freq$variable=="PulpPaperInput",'nSingleProduct']<-nPulpPaperInput
Freq[Freq$variable=="TimberInput",'nSingleProduct']<-nTimberInput
Freq[Freq$variable=="EnergyInput",'nSingleProduct']<-nEnergyInput
Freq[Freq$variable=="mixedProduct",'nSingleProduct']<-nMixedProduct
Freq$longName<-NA
Freq$names
funcFreq<-function(df,categoriesdf){
dfShort<-subset(df,select=-c(Exclusion,DOI))
nMixedProduct<-dim(dfShort[dfShort$singleProduct=="mixedProduct","singleProduct"])[1]
nEnergyInput<-dim(dfShort[dfShort$singleProduct=="EnergyInput","singleProduct"])[1]
nTimberInput<-dim(dfShort[dfShort$singleProduct=="TimberInput","singleProduct"])[1]
nUpstreamInput<-dim(dfShort[dfShort$singleProduct=="UpstreamInput","singleProduct"])[1]
nPulpPaperInput<-dim(dfShort[dfShort$singleProduct=="PulpPaperInput","singleProduct"])[1]
Freq0<-aggregate(dfShort[,],by=list(dfShort$singleProduct), function(x) length(which(x==1)))
Freq1<-data.frame(t(Freq0[,2:ncol(Freq0)]))
colnames(Freq1)<-Freq0$Group.1
Freq1[,"names"]<-colnames(dfShort)
Freq<-melt(Freq1)
Freq<-data.frame(merge(Freq,categoriesdf[,c('names','colcat2','cat2','cat1','colcat1')],by="names",all.x=T))
Freq<-unique(Freq)
Freq<-Freq[!is.na(Freq$cat2),]
Freq$names<-factor(Freq$names,levels=unique(categoriesdf[order(categoriesdf$id),'names']))
Freq$valuePercent<-NA
Freq[Freq$variable=="UpstreamInput",'valuePercent']<-Freq[Freq$variable=="UpstreamInput",'value']/nUpstreamInput*100
Freq[Freq$variable=="PulpPaperInput",'valuePercent']<-Freq[Freq$variable=="PulpPaperInput",'value']/nPulpPaperInput*100
Freq[Freq$variable=="TimberInput",'valuePercent']<-Freq[Freq$variable=="TimberInput",'value']/nTimberInput*100
Freq[Freq$variable=="EnergyInput",'valuePercent']<-Freq[Freq$variable=="EnergyInput",'value']/nEnergyInput*100
Freq[Freq$variable=="mixedProduct",'valuePercent']<-Freq[Freq$variable=="mixedProduct",'value']/nMixedProduct*100
Freq[Freq$variable=="UpstreamInput",'nSingleProduct']<-nUpstreamInput
Freq[Freq$variable=="PulpPaperInput",'nSingleProduct']<-nPulpPaperInput
Freq[Freq$variable=="TimberInput",'nSingleProduct']<-nTimberInput
Freq[Freq$variable=="EnergyInput",'nSingleProduct']<-nEnergyInput
Freq[Freq$variable=="mixedProduct",'nSingleProduct']<-nMixedProduct
Freq$longName<-Freq$names
Freq[Freq$names=="live_biomass_C","longName"]<-"Live biomass"
Freq[Freq$names=="soilC","longName"]<-"Soil carbon"
Freq[Freq$names=="harv_residues","longName"]<-"Harvest residues"
Freq[Freq$names=="eol_biogenic","longName"]<-"End-of-life biogenic emiss."
Freq[Freq$names=="eol_fossil","longName"]<-"End-of-life fossil emiss."
Freq[Freq$names=="maintenance_emiss","longName"]<-"Maintenance emiss."
Freq[Freq$names=="manufacturing_emiss","longName"]<-"Manufacturing emiss."
Freq[Freq$names=="products_storage_C","longName"]<-"C storage in products"
Freq[Freq$names=="off_product_biogenic","longName"]<-"Avoided emiss."
Freq[Freq$names=="forestry_emiss","longName"]<-"Forestry emiss."
Freq[Freq$names=="LUC_dyn","longName"]<-"Dyn. of LUC"
Freq[Freq$names=="rebound_dyn","longName"]<-"Dyn. of econ. feedbacks"
Freq[Freq$names=="biogenic_dyn","longName"]<-"Dyn. of biogenic emiss."
Freq[Freq$names=="fossil_dyn","longName"]<-"Dyn. of fossil emiss."
Freq[Freq$names=="displacement factor used","longName"]<-"Generic displacement factor"
Freq[Freq$names=="self-calculated DF","longName"]<-"Self-calculated displacement factor"
return(Freq)
}
source("~/Documents/GitHub/Wood-Carbon/setup.R", echo=TRUE)
expt_freq
plotData<-expt_freq[(expt_freq$cat1 =="Change in practices"|expt_freq$cat1 =="Environmental change") & !is.na(expt_freq$cat1),
c("longName","variable","value","cat2","colcat2")]
plotData<-aggregate(plotData$value ,by=list(plotData$longName,plotData$cat2,plotData$colcat2),FUN=sum)
colnames(plotData)<-c("names","cat2","colcat2","value")
colorVectDrivers<-unique(plotData[,c("colcat2","cat2")])
colordictDrivers<-setNames(as.character(colorVectDrivers$colcat2),
as.character(colorVectDrivers$cat2))
plotData$wrap<-"All"
plotData$wrap<-factor(plotData$wrap,levels=sort(levels(factor(plotData$wrap))))
ggplot(plotData,aes(x=longName,y=value,fill=cat2))+
coord_flip() +
geom_bar(stat="identity") +
scale_fill_manual(values=colordictDrivers)+
theme_bw()+
theme( axis.ticks = element_blank(),text = element_text(size=txt_size_big),axis.text.x = element_text(angle = 90,hjust=0.5,vjust=0.))+
ylab("Number of experiments")+
xlab("Forest sector description") +
facet_wrap(~wrap)
ggplot(plotData,aes(x=longName,y=value,fill=cat2))+
coord_flip()
plotData
plotData<-expt_freq[(expt_freq$cat1 =="Change in practices"|expt_freq$cat1 =="Environmental change") & !is.na(expt_freq$cat1),
c("longName","variable","value","cat2","colcat2")]
create_driver_frequency <- function(expt_freq,wrap){
if(missing(wrap)){
plotData<-expt_freq[(expt_freq$cat1 =="Change in practices"|expt_freq$cat1 =="Environmental change") & !is.na(expt_freq$cat1),
c("longName","variable","value","cat2","colcat2")]
plotData<-aggregate(plotData$value ,by=list(plotData$longName,plotData$cat2,plotData$colcat2),FUN=sum)
colnames(plotData)<-c("longName","cat2","colcat2","value")
colorVectDrivers<-unique(plotData[,c("colcat2","cat2")])
colordictDrivers<-setNames(as.character(colorVectDrivers$colcat2),
as.character(colorVectDrivers$cat2))
plotData$wrap<-"All"
}else{
plotData<-expt_freq[(expt_freq$cat1 =="Change in practices"|expt_freq$cat1 =="Environmental change") & !is.na(expt_freq$cat1),
c("longName","variable","value","cat2","colcat2")]
colorVectDrivers<-unique(plotData[,c("colcat2","cat2")])
colordictDrivers<-setNames(as.character(colorVectDrivers$colcat2),
as.character(colorVectDrivers$cat2))
plotData$wrap<-plotData$variable
#Debug info
print("found(wrap)")
print(head(plotData))
##
}
plotData$wrap<-factor(plotData$wrap,levels=sort(levels(factor(plotData$wrap))))
ggplot(plotData,aes(x=longName,y=value,fill=cat2))+
coord_flip() +
geom_bar(stat="identity") +
scale_fill_manual(values=colordictDrivers)+
theme_bw()+
theme( axis.ticks = element_blank(),text = element_text(size=txt_size_big),axis.text.x = element_text(angle = 90,hjust=0.5,vjust=0.))+
ylab("Number of experiments")+
xlab("Forest sector description") +
facet_wrap(~wrap)
#ggsave("expt_model_freq.pdf",width=7,height=5)
}
create_driver_frequency(expt_freq[(expt_freq$cat1 =="Change in practices"|expt_freq$cat1 =="Environmental change") & !is.na(expt_freq$cat1),] )
source("~/Documents/GitHub/Wood-Carbon/setup.R", echo=TRUE)
source("~/Documents/GitHub/Wood-Carbon/setup.R", echo=TRUE)
runApp()
source("~/Documents/GitHub/Wood-Carbon/setup.R", echo=TRUE)
source("~/Documents/GitHub/Wood-Carbon/setup.R", echo=TRUE)
runApp()
source("~/Documents/GitHub/Wood-Carbon/setup.R", echo=TRUE)
